#!/bin/bash

####################################################################################################
# This script prepare, build and start containers for a production environment.
####################################################################################################

# Exit when any command fails:
set -e

# Read .env file
export $(egrep -v '^#' .env | xargs)

API_URI="${API_SCHEME}://${API_DOMAIN}:${API_PORT_PUBLIC}"
APP_URI="${APP_SCHEME}://${APP_DOMAIN}:${APP_PORT_PUBLIC}"

echo "‚è≥ Checking variables‚Ä¶"
if [ -z "$API_URI" ] || [ -z "$APP_URI" ]; then
  echo "Error: \$API_URI and/or \$APP_URI is/are empty."
  exit 1
else
  echo "API_URI=${API_URI}"
  echo "APP_URI=${APP_URI}"
fi

if [ "$NODE_ENV" = "production" ] && [ "$CI" != "true" ]; then
  echo "‚è≥ Dumping current databases‚Ä¶"
  yarn db:backup
fi

echo "‚è≥ Stopping all existing containers‚Ä¶"
docker-compose down

echo "‚è≥ Installing dependencies‚Ä¶"
yarn --pure-lockfile

# We take the opportunity of the first "docker-compose" up to remove potential left orphans:
echo "‚è≥ Starting db container‚Ä¶"
docker-compose up -d --remove-orphans db

echo "‚è≥ Building master container‚Ä¶"
docker-compose build --force-rm --no-cache master

echo "‚è≥ Starting master container‚Ä¶"
docker-compose up -d master

echo "‚è≥ Running database migrations‚Ä¶"
docker-compose exec -T master npx knex migrate:latest

echo "‚è≥ Stopping master container‚Ä¶"
docker-compose stop master

echo "‚è≥ Building api container‚Ä¶"
docker-compose build api

echo "‚è≥ Building app container‚Ä¶"
docker-compose build app

# Seed databases for non-production environments:
if [ "$CI" = "true" ] || [ "$NODE_ENV" != "production" ]; then
  if [ "$CI" = "true" ]; then
    echo "‚è≥ Restoring databases snapshot for CI environment‚Ä¶"
  else
    echo "‚è≥ Restoring databases snapshot for development environment‚Ä¶"
  fi
  yarn db:snapshot:restore
fi

echo "‚è≥ Starting postgrest, api and app containers‚Ä¶"
docker-compose up -d app

while [[ "$(curl -s -o /dev/null -w %{http_code} ${APP_URI})" != "200" ]]; do sleep 5; done
while [[ "$(curl -s -o /dev/null -w %{http_code} ${API_URI})" != "200" ]]; do sleep 5; done

echo "üöÄ The server is up and running!"

if [ "$NODE_ENV" = "production" ] && [ "$CI" != "true" ]; then
  echo "üóë Cleaning unused containers, networks, images and build cache‚Ä¶"
  docker system prune -af
  yarn cache clean

  echo "‚úî Cache cleaned."
fi
